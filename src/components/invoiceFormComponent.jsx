import React, { useEffect, useState } from "react";
import "../css/InvoiceFormComponent.css";
import { useLocation, useSearchParams } from "react-router-dom";
import InvoiceService from "../services/InvoiceService";
import ClientService from "../services/ClientService";

const InvoiceFormComponent = ({ onClose }) => {
  const [client, setClient] = useState([]);
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const id = searchParams.get("id");
  console.log("hello");

  useEffect(() => {
    console.log("0");
    console.log(id);

    const fetchClientDetails = async () => {
      console.log("1");
      try {
        console.log("2");
        const response = await ClientService.getClients(id);
        console.log("3");
        setClient(response.data);
        console.log(client);
      } catch (error) {
        console.error("Error fetching client details: ", error);
      }
    };

    // if (id) {
    //   console.log("1");

    //   InvoiceService.getClientDetails(id)
    //     .then((response) => {
    //       console.log("2");
    //       setClient(response.data);
    //       console.log("3");
    //       console.log(client);
    //     })
    //     .catch((error) => {
    //       console.error("Error fetching clients details: ", error);
    //     });
    // }

    if (id) {
      fetchClientDetails();
    }
  }, [id]);

  const [invoiceData, setInvoiceData] = useState({
    invoiceId: "", // Autogenerated invoice ID
    clientId: "", // Client ID from backend
    clientName: "", // Client name from backend
    amount: "",
    currency: "",
    bankAccount: "",
    description: "",
    header: "",
    date: new Date().toISOString().slice(0, 10), // Current date
  });

  useEffect(() => {
    if (client) {
      console.log("-1");
      console.log(client);
      setInvoiceData((prevData) => ({
        ...prevData,
        clientId: client.id || "",
        clientName: client.name || "",
      }));
    }
  }, [client]);

  if (!client) {
    return <div>Loading.....</div>;
  }

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setInvoiceData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    // Perform form submission AClogic here
    // You can access the invoiceData and client details to generate the invoice
    // For simplicity, let's just log the data
    console.log("Invoice Data:", invoiceData);
    console.log("Client Data:", client);
    onClose(); // Close the form after submission
  };

  return (
    <div className="invoice-form-container">
      <h3>Generate Invoice</h3>
      <form onSubmit={handleSubmit}>
        {/* <div className="form-group">
          <label>Invoice ID:</label>
          <input
            type="text"
            name="invoiceId"
            value={invoiceData.invoiceId}
            readOnly
            className="form-control"
            required
          />
        </div> */}
        <div className="form-group">
          <label>Client ID:</label>
          <input
            type="text"
            name="clientId"
            value={invoiceData.clientId}
            readOnly
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Client Name:</label>
          <input
            type="text"
            name="clientName"
            value={invoiceData.clientName}
            readOnly
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Amount:</label>
          <input
            type="text"
            name="amount"
            value={invoiceData.amount}
            onChange={handleInputChange}
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Currency:</label>
          <input
            type="text"
            name="currency"
            value={invoiceData.currency}
            onChange={handleInputChange}
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Bank Account:</label>
          <select
            name="bankAccount"
            value={invoiceData.bankAccount}
            onChange={handleInputChange}
            className="form-control"
            required
          >
            <option value="">Select Bank Account</option>
            <option value="HDFC Bank">HDFC Bank</option>
            <option value="YES Bank">YES Bank</option>
          </select>
        </div>
        <div className="form-group">
          <label>Description:</label>
          <input
            type="text"
            name="description"
            value={invoiceData.description}
            onChange={handleInputChange}
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Header:</label>
          <input
            type="text"
            name="header"
            value={invoiceData.header}
            onChange={handleInputChange}
            className="form-control"
            required
          />
        </div>
        <div className="form-group">
          <label>Date:</label>
          <input
            type="text"
            name="date"
            value={invoiceData.date}
            readOnly
            className="form-control"
            required
          />
        </div>
        {/* Add more form fields as needed */}
        <div className="form-group">
          <button type="submit" className="btn btn-primary">
            Generate
          </button>
          <button type="button" className="btn btn-secondary" onClick={onClose}>
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

export default InvoiceFormComponent;
